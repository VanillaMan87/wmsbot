#pragma config(Sensor, dgtl1,  ultrasonicfront, sensorSONAR_mm)
#pragma config(Sensor, dgtl3,  ultrasonicright, sensorSONAR_inch)
#pragma config(Motor,  port2,           forklift,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           mthrower1,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           mthrower2,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           dr1,           tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port8,           dl1,           tmotorVex269_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
  // ..........................................................................
	while(SensorValue(ultrasonicfront)>= 12)
	{
		motor[dr1]=100;
		motor[dl1]=100;
	}
	// ..........................................................................

  // Remove this function call once you have "real" code.
  AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
task forkliftCheckUp()
{
	if(vexRT[Btn6U]==1)
	{
		motor[forklift]=120; //Raises forklift while 6U is pressed
	}
	else if(vexRT[Btn6U]==0 && vexRT[Btn6D]==0)
	{
		motor[forklift]=0; //Stop thrower
	}

}

task forkliftCheckDown()
{
		if(vexRT[Btn6D]==1)
	{
		motor[forklift]=-120; //Lowers forklift while 6D is pressed
	}
	else if(vexRT[Btn6D]==0 && vexRT[Btn6U]==0)
	{
		motor[forklift]=0; //Stop thrower
	}
}

task mthrowerCheckUp()
{
	if(vexRT[Btn5U]==1)
	{
		motor[mthrower1]=120; //Raises thrower whBtn7U is pressed
		motor[mthrower2]=120;
	}
	else if(vexRT[Btn5U]==0 && vexRT[Btn5D]==0)
	{
		motor[mthrower1]=0; //Stop thrower
		motor[mthrower2]=0;
	}
}

task mthrowerCheckDown()
{
	if(vexRT[Btn5D]==1)
	{
		motor[mthrower1]=-120; //Raises thrower while 7D is pressed
		motor[mthrower2]=-120;
	}
	else if(vexRT[Btn5D]==0 && vexRT[Btn5U]==0)
	{
		motor[mthrower1]=0; //Stop thrower
		motor[mthrower2]=0;
	}
}

task usercontrol()
{
  // User control code here, inside the loop

  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
				// Used to filter out joystick abberations
				int threshold = 10;
				//////////////////////////////////////////////////////////
				//
				// DRIVE
				//
				// This code has filtering in place
				// Because the joystick returns a value that is not always
				// exactly zero.
				//
				// Because of this, the Cortex makes a whining sound
				// because the drive motors are being triggered
				// with values less than 10
				//
				// By testing if the joystick is within the threshold
				// We can turn off the motors and stop the noise
				// and power drain

				if(abs(vexRT[Ch3]) > threshold)         // If the left joystick is greater than or less than the threshold:
				{
					motor[dl1]  = (vexRT[Ch3] );
				}
				else                                    // If the left joystick is within the threshold:
				{
					motor[dl1]  = (0);
				}
				if(abs(vexRT[Ch2]) > threshold)         // If the right joystick is greater than or less than the threshold:
				{
					motor[dr1] = (vexRT[Ch2]);
				}
				else                                    // If the right joystick is within the threshold:
				{
					motor[dr1] = 0;                // Stop the right motor (cancel noise)
				}

			startTask(forkliftCheckUp);

			startTask(forkliftCheckDown);

			startTask(mthrowerCheckUp);

			startTask(mthrowerCheckDown);
    // ........................................................................


  }
}
