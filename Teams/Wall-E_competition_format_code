#pragma config(Motor,  port1,           dr2,           tmotorNone, openLoop)
#pragma config(Motor,  port2,           lift1,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           lift2,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           lift1b,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           lift2b,        tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           dr1,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           dl1,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          dl2,           tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
  // ..........................................................................
motor[dr1] = 127;
motor[dr2] = 127;
motor[dl1] = 127;
motor[dl2] = 127;
wait1Msec(2500);
motor[lift1] = 127;
motor[lift2] = 127;
motor[lift1b] = 127;
motor[lift2b] = 127;
wait1Msec(1000);
motor[lift1] = -127;
motor[lift2] = -127;
motor[lift1b] = -127;
motor[lift2b] = -127;
wait1Msec(1000);
motor[dr1] = -127;
motor[dr2] = -127;
motor[dl1] = -127;
motor[dl2] = -127;
wait1Msec(2500);
  // ..........................................................................
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
task liftCheckUp()
{
	if(vexRT[Btn6U]==1)
	{
		motor[lift1]=120;
		motor[lift1b]=90;//Raises lift whBtn6U is pressed
		motor[lift2]=90;
		motor[lift2b]=120;
	}
	else if(vexRT[Btn6U]==0 && vexRT [Btn6D]==0)
	{
		motor[lift1]=0;
		motor[lift1b]=0;//Stop thrower
		motor[lift2]=0;
		motor[lift2b]=0;
	}
}

task liftCheckDown()
{
	if(vexRT[Btn6D]==1)
	{
		motor[lift1]=-100;
		motor[lift1b]=-100;//lowers lift while 6D is pressed
		motor[lift2]=-100;
		motor[lift2]=-100;
	}
	else if(vexRT[Btn5D]==0 && vexRT[Btn5U]==0)
	{
		motor[lift1]=0;
		motor[lift1b]=0;//Stop thrower
		motor[lift2]=0;
		motor[lift2b]=0;
	}
}

task usercontrol()
{
  // User control code here, inside the loop


	while (true){
  {
 		while (true) {
		// Used to filter out joystick abberations
		int threshold = 10;
		//////////////////////////////////////////////////////////
		//
		// DRIVE
		//
		// This code has filtering in place
		// Because the joystick returns a value that is not always
		// exactly zero.
		//
		// Because of this, the Cortex makes a whining sound
		// because the drive motors are being triggered
		// with values less than 10
		//
		// By testing if the joystick is within the threshold
		// We can turn off the motors and stop the noise
		// and power drain

		if(abs(vexRT[Ch3]) > threshold)         // If the left joystick is greater than or less than the threshold:
		{
			motor[dl1]  = (vexRT[Ch3] );
			motor[dl2]  = (vexRT[Ch3] );
		}
		else                                    // If the left joystick is within the threshold:
		{
			motor[dl1]  = 0;
			motor[dl2]  = 0;
		}
		if(abs(vexRT[Ch2]) > threshold)         // If the right joystick is greater than or less than the threshold:
		{
			motor[dr1] = (vexRT[Ch2]);
			motor[dr2] = (vexRT[Ch2]);
		}
		else                                    // If the right joystick is within the threshold:
		{
			motor[dr1] = 0;
			motor[dr2] = 0;                    // Stop the right motor (cancel noise)
		}


	startTask(liftCheckUp);

	startTask(liftCheckDown);
			}
		}
	}
}
