#pragma config(Motor,  port1,           mpincer,       tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           forklift,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           mthrower,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           dr1,           tmotorVex269_MC29, openLoop)
#pragma config(Motor,  port8,           dl1,           tmotorVex269_MC29, openLoop)

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*/

/*

                U  ___ u   _       _____     _        _                   ____    
 __        __    \/"_ \/  |"|     |" ___| U |"| u U  /"\  u __        __ / __"| u 
 \"\      /"/    | | | |U | | u  U| |_  u_ \| |/   \/ _ \/  \"\      /"/<\___ \/  
 /\ \ /\ / /\.-,_| |_| | \| |/__ \|  _|/| |_| |_,-./ ___ \  /\ \ /\ / /\ u___) |  
U  \ V  V /  U\_)-\___/   |_____| |_|    \___/-(_//_/   \_\U  \ V  V /  U|____/>> 
.-,_\ /\ /_,-.     \\     //  \\  )(\\,-  _//      \\    >>.-,_\ /\ /_,-. )(  (__)
 \_)-'  '-(_/     (__)   (_")("_)(__)(_/ (__)     (__)  (__)\_)-'  '-(_/ (__)     
 
MiniMBP:~ matt$
Weston Middle School
*/
/*
task main()	{

 while (true) {


		// Used to filter out joystick abberations
		int threshold = 10;

		//////////////////////////////////////////////////////////
		//
		// DRIVE
		//
		// This code has filtering in place
		// Because the joystick returns a value that is not always
		// exactly zero.
		//
		// Because of this, the Cortex makes a whining sound
		// because the drive motors are being triggered
		// with values less than 10
		//
		// By testing if the joystick is within the threshold
		// We can turn off the motors and stop the noise
		// and power drain

		if(abs(vexRT[Ch3]) > threshold)         // If the left joystick is greater than or less than the threshold:
		{
			motor[dl1]  = (vexRT[Ch3] );
		}
		else                                    // If the left joystick is within the threshold:
		{
			motor[dl1]  = (0);
		}

		if(abs(vexRT[Ch2]) > threshold)         // If the right joystick is greater than or less than the threshold:
		{
			motor[dr1] = (vexRT[Ch2]);

		}
		else                                    // If the right joystick is within the threshold:
		{
			motor[dr1] = 0;                // Stop the right motor (cancel noise)
		}

	}
	//This code controls the forklift

while(vexRT[Btn6U]==1)
{
	motor[forklift]=100; //Forklift up
}


while(vexRT[Btn6D]==1)
{
	motor[forklift]=-100; //Forklift down
}
`
//This code controls the thrower

while(vexRT[Btn7U]==1)
{
	motor[mthrower]=100; //Thrower up
}

while(vexRT[Btn7D]==1)
{
	motor[mthrower]=-100; //Thrower down
}

//This code controls the pincer

while(vexRT[Btn5U]==1)
{
	motor[mpincer]=100; //Pincer in
}

while(vexRT[Btn5D]==1)
{
	motor[mpincer]=100; //Pincer out
}
}
