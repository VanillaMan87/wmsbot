#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  ultrasonicright, sensorSONAR_inch)
#pragma config(Motor,  port1,            ,             tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,            ,             tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           dl,            tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           mpincerl,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           forklift1,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           forklift2,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           mpincerr,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           dr,            tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,            ,             tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  SensorValue[rightEncoder]=0;


}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
task driveForward()
{
	motor[dl]=120;
	motor[dr]=120;
}
task driveStop()
{
	motor[dl]=0;
	motor[dr]=0;
}
task autonomous()
{
  // ..........................................................................
	 int distance = 1080;           
								                   

 	SensorValue[rightEncoder] = 0;  

	int	sValue = 0;
  while(sValue < distance)
  {
  	sValue = SensorValue[rightEncoder] ;
		startTask(driveForward);
  }

	startTask(driveStop);
  // ..........................................................................
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

int toggleswitch = 0;
  
int forklift = 120;

task forklift1CheckUp()
{
	if(toggleswitch==0)
	{
		if(vexRT[Btn6U]==1)                                           
		{                                                             
			motor[forklift1]=forklift; 
		}
		else if(vexRT[Btn6U]==0 && vexRT[Btn6D]==0)
		{
			motor[forklift1]=0;
		}
	}

}

task forklift1CheckDown()
{
	if(toggleswitch==0)
	{
		if(vexRT[Btn6D]==1)
		{
			motor[forklift1]=-forklift; 
		}
		else if(vexRT[Btn6D]==0 && vexRT[Btn6U]==0)
		{
			motor[forklift1]=0; 
		}
	}
}

task forklift2CheckUp()
{
	if(toggleswitch==1)
	{
		if(vexRT[Btn7D]==1)
		{
			motor[forklift2]=forklift;
		}
		else if(vexRT[Btn7D]==0 && vexRT[Btn7U]==0)
		{
			motor[forklift2]=0;
		}
	}	
}

task forklift2CheckDown()
{
	if(toggleswitch==1)
	{
		if(vexRT[Btn7D]==1)
		{
			motor[forklift2]=-forklift; 
		}
		else if(vexRT[Btn7D]==0 && vexRT[Btn7U]==0)
		{
			motor[forklift2]=0; 
		}
	}
}

task mpincerCheckIn()
{
	if(vexRT[Btn6U]==1)
	{
		motor[mpincerl]=120;
		motor[mpincerr]=120;
	}
	else if(vexRT[Btn6D]==0 && vexRT[Btn6U]==0)
	{
		motor[mpincerr]=0;
		motor[mpincerl]=0;
	}
}

task mpincerCheckOut()
{
	if(vexRT[Btn6D]==1)
	{
		motor[mpincerl]=-120;
		motor[mpincerr]=-120;
	}
	else if(vexRT[Btn6D]==0 && vexRT[Btn6U]==0)
	{
		motor[mpincerl]=0;
		motor[mpincerr]=0;
	}
}

task usercontrol()
{
  // User control code here, inside the loop

  while (true)
  {
								
		int threshold = 10;

		if(abs(vexRT[Ch3]) > threshold)         // If the left joystick is greater than or less than the threshold:
		{
			motor[dl]  = (vexRT[Ch3] );
		}
		else                                    // If the left joystick is within the threshold:
		{
			motor[dl]  = 0;
		}
		if(abs(vexRT[Ch2]) > threshold)         // If the right joystick is greater than or less than the threshold:
		{
			motor[dr] = (vexRT[Ch2]);
		}
		else                                    // If the right joystick is within the threshold:
		{
			motor[dr] = 0;                // Stop the right motor (cancel noise)
		}
			


			startTask(driveStop);		   
		  if(vexRT[Btn8D]==true)
		  {
		  	if(toggleswitch==0)
		  	{
		  		toggleswitch=1;
		  	}
		  	else if(toggleswitch==1)
		  	{
		  		toggleswitch=0;
		  	}		  
		  }

			startTask(forklift1CheckUp);

			startTask(forklift1CheckDown);
			
			startTask(forklift2CheckUp);
			
			startTask(forklift2CheckDown);

			startTask(mpincerCheckIn);

			startTask(mpincerCheckOut);



    // ........................................................................
  }
}
